{
    "contents" : "# top10Vars <- read.xlsx(paste0(dataPath, 'pearson_correlation between observed y and attributes for each market.xlsx')\n#                        , sheetIndex=1\n#                        , header=T\n#                        , stringsAsFactors=F)$Var_Name[1:10]\n# \n# data_after_filtered<- filter_out_records(pre_data_for_outliers2, modelData, market_name2,global_lower_p, global_higher_p)\n# data_after_filtered<- data_after_filtered[,c(market_name2, vars)]\n# market_sales <- data_after_filtered[,market_name2]\n# data_after_filtered<- data_after_filtered[,vars]\n\ntransf4dummy <- function(data_top10Vars,v,n_parts){\n      vct <- data_top10Vars[, v]\n      qtl = unique(quantile(vct, probs=seq(0, 1, 1/3), type = 4))\n      #       qtl4check <- unique(quantile(vct, probs=seq(0,1,n/length(vct)), type=4))\n      qtl4check <- unique(quantile(vct, probs=seq(0,100, 100/n_parts)/100, type=4))\n      if(length(qtl) <= 2){\n            if(length((qtl4check))<=2){\n                  vctAfterCut = cut(vct, breaks=qtl, include.lowest = FALSE, right=TRUE)\n            }else{\n                  vctAfterCut = cut(vct, breaks=(qtl4check), include.lowest = TRUE, right=FALSE)\n                  \n            }\n      }else{\n            vctAfterCut1 = cut(vct, breaks=qtl, include.lowest = TRUE, right=FALSE)\n            vctAfterCut2 = cut(vct, breaks=qtl, include.lowest = TRUE, right=TRUE)\n            if(min(table(vctAfterCut1)) < min(table(vctAfterCut2))){\n                  vctAfterCut <- vctAfterCut2\n            }else{\n                  vctAfterCut <- vctAfterCut1\n            }\n      }\n      \n      vctAfterCut <- as.character(vctAfterCut)\n      return(vctAfterCut)\n}\ntransf2dummy <- function(top10Vars, data_after_filtered, n_parts){\n      data_top10Vars <- data_after_filtered[, top10Vars]\n      summary_uniqNum <- sapply(data_top10Vars, function(vct)length(unique(vct)))\n      lapply(top10Vars, function(v)unique(data_top10Vars[, v]))\n      \n      lapply(data_top10Vars, table)\n      \n      \n      temp <- lapply(top10Vars, function(v)transf4dummy(data_top10Vars,v,n_parts))\n      data_top10Varts4dummy <- as.data.frame(t(ldply(temp, quickdf)))\n      colnames(data_top10Varts4dummy) <- top10Vars\n      top10dummy_tb4Check <- lapply(data_top10Varts4dummy, table)\n      saveRDS(top10dummy_tb4Check, paste0(resultDir, 'top10dummy_tb4Check.RDS'))\n      \n      data_top10Vars2dummy <- model.matrix(~., data_top10Varts4dummy)[, -1]\n      return(data_top10Vars2dummy)\n}\n\ntransf2dummy_y <- function(data, v, n){\n      vct <- data[, v]\n      qtl = unique(quantile(vct, probs=seq(0, 1, 1/n), type = 4))\n      vctAfterCut1 = cut(vct, breaks=qtl, include.lowest = TRUE, right=FALSE)\n      vctAfterCut2 = cut(vct, breaks=qtl, include.lowest = FALSE, right=TRUE)\n      if(min(table(vctAfterCut1)) < min(table(vctAfterCut2))){\n            vctAfterCut <- vctAfterCut2\n      }else{\n            vctAfterCut <- vctAfterCut1\n      }\n      \n      y_df <- data.frame(y_cut=vctAfterCut)\n      \n      y2dummy <- model.matrix(~., data=y_df, contrasts.arg = lapply(y_df, contrasts, contrasts=FALSE))[, -1]\n      return(y2dummy)\n      \n      \n      \n}\n\ntransf2squareEachVar <- function(vct){\n#       vct <- data[, v]\n      vct_square <- vct^2\n      return(vct_square)\n}\ntransf2square <- function(data, vars){\n      data_top10 <- data[, vars]\n      temp <- lapply(data_top10, function(vct)transf2squareEachVar(vct))\n      data_top10Varts2square <- as.data.frame(t(ldply(temp, quickdf)[, -1]))\n      colnames(data_top10Varts2square) <- paste0('square_', vars)\n      return(data_top10Varts2square)\n}\n\ngetCoefTb <- function(step_wise){\n      coef<- data.frame(Coefficient=round(coef(step_wise), 7) , Odds_ratio=round(exp(coef(step_wise)), 7))\n      #        coef<- data.frame(coefficient=round(coef(fit), 2) , odds_ratio=sprintf('%.2f', exp(coef(fit))))\n      \n      p_value<- round(summary(step_wise)$coef[, \"Pr(>|t|)\"], 7)\n      stepwise_output <- cbind(coef, P_value=p_value)\n      return(stepwise_output)\n      \n}\n\nvarsDelAndStepwiseTest <- function(market_name2, n_parts\n                                   , bTop10dummy\n                                   , bYdummy\n                                   , bNonLinear\n                                   , bRemoveTop10init){\n      data_after_filtered<- filter_out_records(pre_data_for_outliers2, modelData, market_name2,global_lower_p, global_higher_p)\n      data_after_filtered<- data_after_filtered[,c(market_name2, vars)]\n      market_sales <- data_after_filtered[,market_name2]\n      data_after_filtered<- data_after_filtered[,vars]\n      \n      if(bTop10dummy == TRUE){\n            # add dummy variables of the top 10 variables\n            dummy4top10 <- transf2dummy(top10Vars, data_after_filtered, n_parts=n_parts)\n            data_after_filtered = data_after_filtered %>%\n                  bind_cols(as.data.frame(dummy4top10))\n           \n      }\n      \n      \n      if(bNonLinear == TRUE){\n            # add x^2 variables of the top 10 variables\n            squareTop10 <- transf2square(data_after_filtered, top10Vars)\n            data_after_filtered = data_after_filtered %>%\n                  bind_cols(as.data.frame(squareTop10))\n      }\n      \n      # dim(data_after_filtered)\n      non_zero_vars <- nearZeroVar(data_after_filtered, saveMetrics= TRUE)\n      # print(non_zero_vars)\n      \n      # vars_to_filter_1 <- colnames(data_after_filtered)[non_zero_vars$zeroVar]\n      # print(vars_to_filter_1)\n      \n      data_after_filtered <- data_after_filtered[, !non_zero_vars$zeroVar]\n      # dim(data_after_filtered)\n      \n      descrCor <-  cor(data_after_filtered)\n      highCorr <- sum(abs(descrCor[upper.tri(descrCor)]) > correlation_criterion)\n      # print(highCorr)\n      # summary(descrCor[upper.tri(descrCor)])\n      \n      highlyCorDescr <- findCorrelation(descrCor, cutoff = correlation_criterion)\n      # print(colnames(data_after_filtered)[highlyCorDescr])\n      # s <- cor(data_after_filtered[,highlyCorDescr])\n      # write.csv(s,\"high_correlation.csv\")\n      \n      data_after_filtered <- data_after_filtered[,-highlyCorDescr]\n      descrCor2 <- cor(data_after_filtered)\n      # summary(descrCor2[upper.tri(descrCor2)])\n      # dim(data_after_filtered)\n      \n      \n      comboInfo <- findLinearCombos(as.matrix(data_after_filtered))\n      # print(comboInfo)\n      \n      data_after_filtered <- data_after_filtered[, -comboInfo$remove]\n      # dim(data_after_filtered)\n      \n      #draw graphics for t\n      \n      # data_after_filtered<- data.frame(y = market_sales,data_after_filtered)\n      data_after_filtered <- data_after_filtered %>%\n            mutate(y=market_sales)\n      \n      # if removing the original top 10 variables\n      if(bRemoveTop10init == TRUE){\n            data_after_filtered <- data_after_filtered %>%\n                  select(-one_of(top10Vars))\n      }\n      \n      \n      if(bYdummy == TRUE){\n            \n            # add dummy variables for y\n            y_dummy <- transf2dummy_y(data=data_after_filtered, v='y', n=3)\n            \n            data_after_filtered = data_after_filtered %>%\n                  bind_cols(as.data.frame(y_dummy))\n            \n      }\n      #TEST STEPWISE MODEL AFTER DELETING SOME PREDICTORS\n      \n      lm_model <- lm(y~., data = data_after_filtered)\n      \n      lm_step <- step(lm_model, \n                      direction = \"both\",\n                      trace = 0)\n      \n      # get the student residual\n      studentized_residuals <- rstudent(lm_step)\n      \n      # get the coefficient table\n      stepwise_coefs <- getCoefTb(lm_step)\n      \n      y_pred <- predict(lm_step, data_after_filtered)  \n      y <- data_after_filtered$y\n      df4residualPlot <- data.frame(Observe=y\n                                    , Pred=y_pred\n                                    , Residual=y-y_pred\n                                    , Studentized_residuals=studentized_residuals)\n      \n      R.Square <- cal_rsquare(data_after_filtered$y, y_pred)\n      \n      cat('RSquare for ', market_name2, ' = ', R.Square, '\\n',file=\"RSquare_check.txt\", sep=' ', append=TRUE)\n      \n      data_for_check <-   data_after_filtered[,-grep(\"dummy\", colnames(data_after_filtered))]\n      \n      #start drawing scattered plots.\n      \n      col_names<- colnames(data_for_check)\n      \n      # print(colnames(data_for_check)[-1])\n      # for(i in 2:ncol(data_for_check)){\n      # plot_title_1 <- paste0(\"Observed Y (\", market_name2, \") V.S. \", colnames(data_for_check)[i])\n      # print(ggplot(data_for_check, aes_string(x=col_names[i], y = col_names[1])) + geom_point() + ggtitle(plot_title_1) )\n      # }\n      \n      #print correlation of sales against other predictors.\n      check_corr <- cor(x=data_for_check[,-1], y = data_for_check[,1])\n      colnames(check_corr) <- market_name2\n      check_corr2 <- check_corr[order(abs(check_corr[,market_name2]), decreasing = TRUE), , drop = FALSE]\n      colnames(check_corr2) <- market_name2\n      # write.csv(check_corr2, paste0(resultDir, market_name2, \"_corr.csv\"),row.names=TRUE)\n      \n      temp <- c(market_name=\"panel_catt_daily\"\n                , n_parts = n_parts\n                , bTop10dummy = bTop10dummy\n                , bYdummy = bYdummy\n                , bNonLinear = bNonLinear\n                , bRemoveTop10init = bRemoveTop10init\n                , R.Square = R.Square)\n      output <- list(rsquare=temp, rsquareTbNm=names(temp), coefs=stepwise_coefs, check_corr2=check_corr2\n                     , df4residualPlot=df4residualPlot)\n      return(output)\n}\n\nsummarize_result <- function(try_list){\n      temp <- lapply(try_list, function(i){\n            bTop10dummy = para_df[i, \"bTop10dummy\"]\n            bYdummy = para_df[i, \"bYdummy\"]\n            bNonLinear = para_df[i, \"bNonLinear\"]\n            bRemoveTop10init = para_df[i, \"bRemoveTop10init\"]\n            \n            temp_lst <- varsDelAndStepwiseTest(market_name2=\"panel_catt_daily\"\n                                               , n_parts = n_parts\n                                               , bTop10dummy = bTop10dummy\n                                               , bYdummy = bYdummy\n                                               , bNonLinear = bNonLinear\n                                               , bRemoveTop10init = bRemoveTop10init\n            )\n            \n            return(temp_lst)\n      })   \n      return(temp)\n}\n\nsaveTb <- function(lst){\n      lapply(1:length(lst), function(i){\n            X <- lst[[i]]\n            flag <- as.data.frame(rbind(X$rsquare))\n            coefs <- X$coefs\n            corr <- X$check_corr2\n            write.xlsx(coefs\n                       , file=paste0(resultDir, 'stepwise_coefs.xlsx')\n                       , sheetName=paste0('try ', i)\n                       , row.names=T\n                       , append=T\n                       , showNA=T\n            )\n            write.xlsx(corr\n                       , file=paste0(resultDir, 'correlation.xlsx')\n                       , sheetName=paste0('try ', i)\n                       , row.names=T\n                       , append=T\n                       , showNA=T\n            )\n            \n      })\n}\n",
    "created" : 1479352215680.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "100|55|230|0|\n252|24|274|0|\n",
    "hash" : "1361820974",
    "id" : "67F32862",
    "lastKnownWriteTime" : 1479366516,
    "path" : "C:/work/working materials/Fr_univ_estimation/02 Code/01 outlier deletion/functions/funs.R",
    "project_path" : "functions/funs.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}