{
    "contents" : "\n      \n\nrm(list=ls())\n\nlibrary(ggplot2)\n# library(magrittr)\nlibrary(caret)\n\nlibrary(dplyr)\n\nlibrary(xlsx)\n\nlibrary(plyr)\n\n\nsource(\"./functions/funs.R\")\n\ndataPath = \"./../../01 Data/\"\nn_parts <- 60\nbTop10dummy = T\nbYdummy = F\nbNonLinear = F\nbRemoveTop10init = T\n\ntimeStamp <- as.character(Sys.time())\ntimeStamp <- gsub(\":\", \".\", timeStamp)  # replace \":\" by \".\"\nresultDir <- paste('./Results/', timeStamp, \"/\", sep = '')\ndir.create(resultDir, showWarnings = TRUE, recursive = TRUE, mode = \"0777\")\ntraceFile <- paste0(resultDir, 'traceFile.csv')\ncat(file=traceFile, append = T, 'n_parts=', n_parts, ', bTop10dummy='\n    , bTop10dummy, ', bYdummy=', bYdummy, ', bNonLinear=', bNonLinear\n    , ', bRemoveTop10init=', bRemoveTop10init, '\\n')\n\nload(paste0(dataPath, \"For_Delete_outliers.RData\")) #FR_model_data_withsurvey [1] 7279  202\n#universe_sales_info [1] 22355    11\n\n\npanel_sales_info <- subset(universe_sales_info, !is.na(panel_catt)) #[1] 14566    11\n# dim(panel_sales_info)\n\nFR_model_data_withsurvey_panel <- subset(FR_model_data_withsurvey, !is.na(panel_catt_daily)) #[1] 3520  202\nFR_model_data_withsurvey_nonpanel <- subset(FR_model_data_withsurvey, is.na(panel_catt_daily)) #[1] 3759  202\n# dim(FR_model_data_withsurvey_panel)\n# dim(FR_model_data_withsurvey_nonpanel)\n\nFR_for_outliers <- subset(FR_model_data_withsurvey_panel, select = code_onekey:panel_caac_daily)\n\npre_data_for_outliers<- left_join(FR_for_outliers, panel_sales_info, by=c(\"code_onekey\"))\n# dim(pre_data_for_outliers)\n# colnames(pre_data_for_outliers)\n\n# table(apply(pre_data_for_outliers, 1, function(x){any(is.na(x))}))\n\n#step 1-- -\tKeep panelist with at least 140 days with sales, now first mark those with at least 140 days\n\npre_data_for_outliers<- mutate(pre_data_for_outliers, no_less_than_140days = ifelse(panel_nbjannuel>=140, 1, 0))\n\n#step2 -- -\tTruncate the serie regarding the share of turnover for a basket (basket / TT) or the TT turnover for total, by keeping \n# Between the 0.5th percentile and 99.5th percentile \n# From the 1st percentile only\n\ncreate_indicator_for_percentile <- function(in_df, col_name, low_p, high_p, low_p2){\n      \n      percentile_two_tails <- function(input_df, column_name, lower_p, higher_p){\n            \n            quantile_series <- quantile(input_df[,column_name], probs= c(lower_p, higher_p), na.rm = TRUE )\n            # print(quantile_series)\n            \n            new_column_name <- paste0(column_name, \"_between_\", lower_p, \"_\", higher_p)\n            # print(new_column_name)\n            \n            a_new_vector <- ifelse(input_df[,column_name]< quantile_series[1], 0, ifelse(input_df[,column_name] > quantile_series[2], 0, 1))\n            \n            # print(table(a_new_vector))\n            return(list(a_new_vector,new_column_name))\n            \n            \n      }\n      \n      \n      percentile_one_tail <- function(input_df, column_name, lower_p){\n            \n            quantile_series <- quantile(input_df[,column_name], probs= c(lower_p), na.rm = TRUE )\n            # print(quantile_series)\n            \n            new_column_name <- paste0(column_name, \"_from_\", lower_p)\n            # print(new_column_name)\n            \n            a_new_vector<- ifelse(input_df[,column_name] < quantile_series[1], 0, 1)\n            # print(table(a_new_vector))\n            \n            return(list(a_new_vector,new_column_name))\n            \n            \n      }\n      \n      s1 <- percentile_two_tails(in_df, col_name, low_p, high_p)\n      s2 <- percentile_one_tail(in_df, col_name, low_p2)\n      \n      in_df[, s1[[2]]] <- s1[[1]]\n      \n      in_df[, s2[[2]]] <- s2[[1]]\n      \n      return(in_df)\n      \n}\n\n#pre_data_for_outliers2 <- create_indicator_for_percentile(pre_data_for_outliers, \"panel_catt_daily\", 0.20, 0.80, 0.01)\n# head(pre_data_for_outliers2,3)\n\n#now start the loop thru all daily variables\ndaily_ave_sales <- c(\"panel_catt_daily\", \"panel_cahm_daily\",     \"panel_cacs_daily\",     \"panel_cavt_daily\"    \n                     ,\"panel_cadt_daily\",     \"panel_caft_daily\" ,    \"panel_camr_daily\" ,    \"panel_camn_daily\" ,    \"panel_caac_daily\")\n\n\nglobal_lower_p<- 0.05\nglobal_higher_p <- 1 - global_lower_p\nglobal_lower_p2 <- 0.01\n\nfor(i in 1:length(daily_ave_sales)){\n      \n      if(i==1){\n            \n            pre_data_for_outliers2<- create_indicator_for_percentile(pre_data_for_outliers, daily_ave_sales[i], global_lower_p, global_higher_p, global_lower_p2)\n      } else{\n            \n            pre_data_for_outliers2<- create_indicator_for_percentile(pre_data_for_outliers2, daily_ave_sales[i], global_lower_p, global_higher_p, global_lower_p2)\n            \n      }\n      \n}\n\n# colnames(pre_data_for_outliers2)\n\n#table(pre_data_for_outliers2$panel_catt_daily_between_0.005_0.995, pre_data_for_outliers2$panel_cahm_daily_between_0.005_0.995)\n\n# table(pre_data_for_outliers2$panel_catt_daily_from_0.01, pre_data_for_outliers2$panel_cahm_daily_from_0.01)\n# table(pre_data_for_outliers2$panel_camn_daily_between_0.005_0.995,  pre_data_for_outliers2$panel_caac_daily_between_0.005_0.995)\n# with(pre_data_for_outliers2, table(no_less_than_140days, panel_catt_daily_between_0.005_0.995))\n# with(pre_data_for_outliers2, table(panel_catt_daily_between_0.005_0.995, panel_catt_daily_from_0.01))\n\n\n\n\nfilter_out_records<- function(in_df, model_data, bucket_name, low_p, high_p){\n      \n      col_name <- paste0(bucket_name, \"_between_\", low_p, \"_\", high_p)\n      pharma_ids_to_keep <- in_df[ in_df[, col_name] == 1 & in_df[,\"no_less_than_140days\"]== 1 , \"code_onekey\"]\n      \n      \n      output<-model_data[model_data[, \"code_onekey\"] %in% pharma_ids_to_keep, ]\n      cat(\"Number of panel pharmacies retained...\\n\")\n      print(nrow(output))\n      return(output)\n      \n}\n\ncal_rsquare<- function(y, y_hat){\n      \n      SST <- sum((y-mean(y))^2)\n      SSE <- sum((y-y_hat)^2)\n      R_Square<- 1-  SSE/SST\n      return(R_Square)\n      \n}   \n\n\n# prepare model variables list\nmodelData<- FR_model_data_withsurvey_panel\ndropVars <- c(\"code_onekey\",\"panel\")\nid_var <- \"code_onekey\"\n\n\n# variables for normal model \nvars <- setdiff(names(modelData), \n                c(dropVars,\n                  names(modelData)[grep(\"log_|lg_\", names(modelData))]))\n\nvar_response <- vars[grep(\"panel_\", vars)]\nvars <- setdiff(vars, var_response)\n# cat(\">>> There are\", length(vars), \"Variables for model <<<\\n\")\n\nlog_vars <- c(names(modelData)[grep(\"log_|lg_|dummy\", names(modelData))])\n\nlog_var_response <- log_vars[grep(\"log_panel_\", log_vars)]  \n\nlog_vars <- setdiff(log_vars, log_var_response)\n# cat(\">>> There are\", length(log_vars), \"Variables for log model <<<\\n\")  \n\n\n\n#check pearson correlation between sales baskets and original variables.\n# modelData[ , ]\nmarket_name2<- \"panel_catt_daily\"\ncorrelation_criterion <- 0.95\n\n\ntop10Vars <- read.xlsx(paste0(dataPath, 'pearson_correlation between observed y and attributes for each market.xlsx')\n                       , sheetIndex=1\n                       , header=T\n                       , stringsAsFactors=F)$Var_Name[1:10]\n\npara_df <- as.data.frame(rbind(\n      c(bTop10dummy=T, bYdummy=F, bNonLinear=F, bRemoveTop10init=T)\n      , c(bTop10dummy=F, bYdummy=F, bNonLinear=T, bRemoveTop10init=T)\n      , c(bTop10dummy=T, bYdummy=T, bNonLinear=F, bRemoveTop10init=T)\n      , c(bTop10dummy=F, bYdummy=F, bNonLinear=T, bRemoveTop10init=F)\n))\n   \n\n\nresult_lst <- summarize_result(3)\n\nrsquare_df <- ldply(lapply(result_lst, function(X)X$rsquare), quickdf)\nwrite.csv(rsquare_df, paste0(resultDir, 'RSquare.csv'), row.names = F)\n\nsaveTb(result_lst)\n\nreadRDS(paste0(resultDir, 'top10dummy_tb4Check.RDS'))\n\n# for residual plot\ndf4residualPlot <- result_lst[[1]]$df4residualPlot\nsaveRDS(df4residualPlot, paste0(resultDir, 'df4residualPlot.RDS'))\n",
    "created" : 1479352207926.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "2301554573",
    "id" : "5D0820C",
    "lastKnownWriteTime" : 1479367954,
    "path" : "C:/work/working materials/Fr_univ_estimation/02 Code/01 outlier deletion/scripts/main.R",
    "project_path" : "scripts/main.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}